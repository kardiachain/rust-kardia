[package]
name = "kp-io"
version = "0.1.0"
edition = "2021"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[dependencies]
kp-core = { path = "../core", default-features = false}
futures = { version = "0.3.21", features = ["thread-pool"], optional = true }
kp-std = { path = "../std"}
tracing = { version = "0.1.29", default-features = false }
kp-trie = { version = "0.1.0", default-features = false, optional = true, path = "../trie" }
kp-externalities = { version = "0.1.0", default-features = false, optional = true, path = "../externalities" }
codec = { package = "parity-scale-codec", version = "3.1.3", default-features = false, features = ["bytes"] }
secp256k1 = { version = "0.24.0", features = ["recovery", "global-context"], optional = true }
libsecp256k1 = { version = "0.7", optional = true }
bytes = { version = "1.1.0", default-features = false }
kp-runtime-interface = { version = "0.1.0", default-features = false, path = "../runtime-interface" }
kp-tracing = { version = "0.1.0", default-features = false, path = "../tracing" }


[features]
default = [ "std" ]
std = [ 
	"kp-core/std",
	"futures", 
	"kp-std/std", 	
	"tracing/std", 
	"kp-trie/std", 
	"codec/std", 
	"kp-tracing/std",
	"kp-externalities/std", 
	"libsecp256k1",
	"secp256k1", 
	"bytes/std", 
	"kp-runtime-interface/std"
]

with-tracing = [
	"kp-tracing/with-tracing"
]

# These two features are used for `no_std` builds for the environments which already provides
# `#[panic_handler]`, `#[alloc_error_handler]` and `#[global_allocator]`.
#
# For the regular wasm runtime builds those are not used.
disable_panic_handler = []
disable_oom = []
disable_allocator = []

# This feature flag controls the runtime's behavior when encountering
# a panic or when it runs out of memory, improving the diagnostics.
#
# When enabled the runtime will marshal the relevant error message
# to the host through the `PanicHandler::abort_on_panic` runtime interface.
# This gives the caller direct programmatic access to the error message.
#
# When disabled the error message will only be printed out in the
# logs, with the caller receving a generic "wasm `unreachable` instruction executed"
# error message.
#
# This has no effect if both `disable_panic_handler` and `disable_oom`
# are enabled.
#
# WARNING: Enabling this feature flag requires the `PanicHandler::abort_on_panic`
#          host function to be supported by the host. Do *not* enable it for your
#          runtime without first upgrading your host client!
improved_panic_error_reporting = []